blueprint:
  name: Dim Smart Light Down
  description: This blueprint detects events from EnOcean switches and dims lights down. It can/shall be used in conjunction with 'Dim Smart Light Up', 'Switch Smart Light Off' and 'Switch Smart Light On' so that you can controll one light with two buttons (up down button) of one switch.
  domain: automation
  author: Philipp Grimm
  input:
    event_id:
      name: Name of event
      description: Enter event id of button
      selector:
        text: {}
    switch_position:
      name: Switch Position
      description: Choose 'left' or 'right'
      selector:
        select:
          options:
            - left
            - right
      default: left
    light_target:
      name: Light to Control
      description: The light entity to turn on or off based on the event data
      selector:
        target:
          entity:
            domain: light
    start_offset:
      name: start delay
      description: Starts after a small delay so that there is not interference with switch on/off.
      selector:
        number:
          min: 0
          max: 60
          step: 0.1
      default: 0.5
    dimming_step:
      name: Dimming Step
      description: Step size of dimming
      selector:
        number:
          min: 0
          max: 255
          step: 5
      default: 20
          

variables:
  var_position: !input switch_position
  var_target_light: !input light_target
  var_start_offset: !input start_offset
  var_start_time: "{{ var_start_offset * 1000 }}"

triggers:
  - trigger: event
    event_type: !input event_id
    
conditions:
  - condition:
      - condition: template
        value_template: >-
          {{ trigger.event.data.pressed == True}}

actions:
  - delay:
      milliseconds: "{{var_start_time |int}}"
  - action: system_log.write
    metadata: {}
    data:
      level: info
      message: "Test2 test2: {{var_start_time}}, {{ trigger.event.data.pressed_buttons}}, {{is_state(trigger.event.data.id, 'on')}}, {{trigger.event.data.entity_id}}"
  - repeat:
      while:
        - condition: template
          value_template: "{{is_state(trigger.event.data.entity_id, 'on')}}"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ trigger.event.data.pressed_buttons == ['LT'] and var_position == 'left'}}"
              sequence:
                - service: light.turn_on
                  target: !input light_target
                  data:
                    brightness_step: 20
                - delay:
                    milliseconds: 50
            - conditions:
                - condition: template
                  value_template: "{{ trigger.event.data.pressed_buttons == ['LB'] and var_position == 'left'}}"
              sequence:
                - service: light.turn_on
                  target: !input light_target
                  data:
                    brightness_step: -20
                - delay:
                    milliseconds: 50
            - conditions:
                - condition: template
                  value_template: "{{ trigger.event.data.pressed_buttons == ['RT'] and var_position == 'right'}}"
              sequence:
                - service: light.turn_on
                  target: !input light_target
                  data:
                    brightness_step: 20
                - delay:
                    milliseconds: 50
            - conditions:
                - condition: template
                  value_template: "{{ trigger.event.data.pressed_buttons == ['RB'] and var_position == 'right'}}"
              sequence:
                - service: light.turn_on
                  target: !input light_target
                  data:
                    brightness_step: -20
                - delay:
                    milliseconds: 50